import type {
  GetServerSidePropsContext,
  InferGetServerSidePropsType,
} from 'next';
import Head from 'next/head';
import {signIn, signOut, useSession} from 'next-auth/react';
import superjson from 'superjson';
import {appRouter} from '../server/trpc/router';
import {createProxySSGHelpers} from '@trpc/react/ssg';
import {createContext} from '../server/trpc/runtimeContext';
import {useBearStore} from '../store/bearStore';
import Spline from '@splinetool/react-spline';

const Home = (data: InferGetServerSidePropsType<typeof getServerSideProps>) => {
  const hello = data.hello;
  const secretMessage = data.secretMessage;

  const bearStore = useBearStore();
  const bears = bearStore.bears;

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app"/>
        <link rel="icon" href="/favicon.ico"/>
      </Head>
      <main
        className="container flex flex-col items-center justify-center min-h-screen p-4
        mx-auto text-white z-50">
        <div className="flex flex-row gap-8 w-full overflow-hidden"
          style={{minHeight: '100vh'}}>
          <div className="flex flex-col justify-center w-1/2">
            <h1
              className="text-5xl md:text-[5rem] leading-normal font-extrabold text-white">
              Create <span className="text-purple-300">T3</span> App
            </h1>
            <div>Bears count: {bears}</div>
            <button onClick={() => bearStore.increase(1)}
              className="border-2 border-r-2 p-4">Add bear
            </button>
          </div>
          <div
            className="w-1/2 overflow-hidden flex items-center justify-center">
            <Spline scene="/mainScene4.spline"/>

            {/* <video autoPlay loop muted */}
            {/*   style={{width: '1500px', height: '500px'}}> */}
            {/*   <source src="/calculatorFinal.mp4" type="video/mp4"/> */}
            {/* </video> */}
          </div>
        </div>
        <div className="container flex flex-col items-center justify-center min-h-screen p-4
        mx-auto z-50">
          <p className="text-2xl text-white">This stack uses:</p>
          <div
            className="grid gap-3 pt-3 mt-3 text-center md:grid-cols-3 lg:w-2/3">
            <TechnologyCard
              name="NextJSas"
              description="The React framework for production"
              documentation="https://nextjs.org/"
            />
            <TechnologyCard
              name="TypeScript"
              description="Strongly typed programming language that builds on
            JavaScript, giving you better tooling at any scale"
              documentation="https://www.typescriptlang.org/"
            />
            <TechnologyCard
              name="TailwindCSS"
              description="Rapidly build modern websites without ever leaving your HTML"
              documentation="https://tailwindcss.com/"
            />
            <TechnologyCard
              name="tRPC"
              description="End-to-end typesafe APIs made easy"
              documentation="https://trpc.io/"
            />
            <TechnologyCard
              name="Next-Auth"
              description="Authentication for Next.js"
              documentation="https://next-auth.js.org/"
            />
            <TechnologyCard
              name="Prisma"
              description="Build data-driven JavaScript & TypeScript apps in less time"
              documentation="https://www.prisma.io/docs/"
            />
          </div>
          <div
            className="flex items-center justify-center w-full pt-6 text-2xl text-blue-500">
            {hello ? <p>{hello.greeting}</p> : <p>Loading..</p>}
          </div>
          <AuthShowcase secretMessage={secretMessage}/>
        </div>
      </main>
    </>
  );
};

export default Home;

/**
 * SSR
 */
export async function getServerSideProps(
    context: GetServerSidePropsContext<{ id: string }>,
) {
  const ssg = createProxySSGHelpers({
    router: appRouter,
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    ctx: await createContext({req: context.req, res: context.res}),
    transformer: superjson,
  });

  const id = context.query?.id || null;
  const hello = await ssg.user.hello.fetch({text: 'from tRPC ssr'});
  const oneUser = await ssg.user.getUser.fetch({email: 'gtubelevicius@gmail.com'});
  let secretMessage = null;
  try {
    secretMessage = await ssg.auth.getSecretMessage.fetch();
  } catch (e) {

  }

  console.log('hello', hello);
  console.log('MSG', secretMessage);

  return {
    props: {
      trpcState: ssg.dehydrate(),
      hello,
      id,
      secretMessage,
      oneUser,
    },
  };
}

interface AuthShowcaseProps {
  secretMessage: string | null;
}

const AuthShowcase = ({secretMessage}: AuthShowcaseProps) => {
  const {data: sessionData} = useSession();

  return (
    <div className="flex flex-col items-center justify-center gap-2">
      {sessionData && (
        <p className="text-2xl text-blue-500">
          Logged in as {sessionData?.user?.email}
        </p>
      )}
      {secretMessage && (
        <p className="text-2xl text-blue-400">{secretMessage}</p>
      )}
      <button
        className="px-4 py-2 border border-black text-xl rounded-md
        bg-violet-50 hover:bg-violet-100 shadow-lg'"
        onClick={sessionData ? () => signOut() : () => signIn()}
      >
        {sessionData ? 'Sign out' : 'Sign in'}
      </button>
    </div>
  );
};

type TechnologyCardProps = {
  name: string;
  description: string;
  documentation: string;
};

const TechnologyCard = ({
  name,
  description,
  documentation,
}: TechnologyCardProps) => {
  return (
    <section
      className="flex flex-col justify-center p-6 duration-500 border-2
       border-gray-500 rounded shadow-xl motion-safe:hover:scale-105">
      <h2 className="text-lg text-coral-500">{name}</h2>
      <p className="text-sm text-coral-200">{description}</p>
      <a
        className="mt-3 text-sm underline text-violet-500 decoration-dotted underline-offset-2"
        href={documentation}
        target="_blank"
        rel="noreferrer"
      >
        Documentation
      </a>
    </section>
  );
};
